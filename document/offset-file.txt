------------------------------------------------------------------------------
  Hyper Operating System V4 Advance  --μITRON4.0仕様OS
    オフセットファイル生成ツール

                                       Copyright (C) 1998-2007 by Project HOS
                                       http://sourceforge.jp/projects/hos/
------------------------------------------------------------------------------


1. 概要

     本ドキュメントは Hyper Operating System V4 Advance （以下 HOS-V4A）の
   オフセットファイル生成ツールについての説明を記載します。



2. オフセットファイルとは

     アセンブリ言語で記述されるプログラムから, C言語の構造体にアクセスする場
   合, 構造体の各フィールドのオフセット値を参照します。
     HOS-V4Aでは，必要なオフセット値を算出し, ヘッダファイル中のマクロ定義と
   して出力する仕組みを用意しています。

     典型的には, 以下ような処理を実装するために本機能を使用することが可能です:

     - 割込みコンテキスト/タスクコンテキスト中の各レジスタへのアクセス
     - メモリ空間中にマップされたI/Oレジスタへのアクセス



3. 前提条件

     コンパイラが出力するアセンブリソースコードを解析することでオフセット
   ファイルを生成します。このため, 以下のコンパイラのいずれかを使用する
   ことが使用に際しての前提条件となります。

   - GNU Compiler Collection
   - LLVM/clang

   また, デバッグオプションにgdb拡張 ( -ggdb )を指定することはできません。

     上記背景から, 以下では, ビルドツールにGNU Makeを使用することを
   前提に説明を記載しています。 GNU Make以外のビルドツールを使用する場合は,
   ``付録 C. オフセットファイルの生成までのコマンドライン''の記載を参考に
   オフセットファイルの生成ルールを作成してください。



4. オフセットファイルの生成方法

     オフセットファイルを生成するための手順は以下の通りです:

     1) オフセットファイル生成元Cソースの作成
     2) Makefile中へのオフセットファイル生成ルールの追加



4.1. オフセットファイル生成元Cソースの作成

       オフセットファイル生成に使用するCソースファイルを作成します。
     本ソースファイルの形式は, 以下の通りです

     a) ソースファイルの先頭で, ``asm_offset_helper.h''をインクルードします。
     b) 1) ``asm_offset_helper.h''のインクルード処理の継続行で, データサイズや
     	オフセットアドレスを出力する対象となるデータ構造を定義したヘッダを
	インクルードします(複数インクルード可能)。
     c) 標準Cのmain関数を定義します。
     d) main関数中でオフセットファイル用マクロを使用して, 定数定義,
     	オフセットアドレス定義の出力指示を記述します。
	使用可能なマクロについては, ``5. オフセットファイル用マクロ''を参照
	ください。
     e) main関数を終了します


     オフセットファイル生成元Cソースの記述例を以下に示します(*):
     (*) 以下の例では説明のために行頭に行番号を入れています。
         実際のソースコードでは, 行番号の入力は必要ありません。


     ```
      1: #include "asm_offset_helper.h"  /*  a) オフセットファイル作成支援ヘッダ */
      2:
      3: #include "procatr.h"  /* b) データ構造を定義しているヘッダのインクルード */
      4:
      5: int main(int argc, char *argv[]) /* c) main関数の定義 */
      6: {
      7:   /* オフセットファイル用マクロを使用した定数定義出力指示 */
      8:
      9:   /* d) 定数値出力指示 */
     10:   DEFINE_VAL(_KERNEL_RISCV_PROC_ICTX_SIZE, sizeof(struct _kernel_riscv_ictx));
     11:
     12:   /* 略 */
     13:
     14:   /* d) オフセットアドレス出力指示 */
     15:   OFFSET(_KERNEL_RISCV_PROC_ICTX_RA, _kernel_riscv_ictx, ra);
     16:
     17:   /* 略 */
     18:
     19:   return 0; /* e) main関数の終了 */
     20: }
     ```



4.2. Makefile中へのオフセットファイル生成ルールの追加

       HOS-V4Aでは, GNU Make使用時のオフセットファイル生成処理のルール
     定義を容易にするための関数を用意しています。

     これらの関数を使用するためには, Makefile中で, オフセットファイル
     生成用設定ファイル`$(KERNEL_MAKINC_DIR)/asmoffgcc_d.inc`を
     読み込んでください。

     `asmoffgcc_d.inc`には以下の関数が定義されています。

     1) _bld_gmk_asmoff_create_depend
     名前: _bld_gmk_asmoff_create_depend
     引数:
	第1引数: 生成するオフセットファイル(ヘッダファイル)へのパス
	第2引数: オフセットファイル生成元Cソースファイルへのパス
     使用例:
     プロセッサ依存のソースファイル格納ディレクトリ($(SRC_PROC_DIR))中に
     格納されたオフセットファイル生成元Cソースファイル`regoff.c`を元に
     プロセッサ依存のヘッダファイル格納ディレクトリ($(INC_PROC_DIR))中に
     オフセットファイル`regoff.h`を出力する。

     ```
     # オフセットファイル生成用設定ファイル読込み
     include $(KERNEL_MAKINC_DIR)/asmoffgcc_d.inc

     略

     # オフセットファイル生成ルール
     $(INC_PROC_DIR)/regoff.h: $(SRC_PROC_DIR)/regoff.c
	$(call _bld_gmk_asmoff_create_depend,$@,$<)
     ```



5. オフセットファイル用マクロ

    `asm_offset_helper.h`中に以下のマクロを用意しています。

     1) DEFINE_VAL
     書式: DEFINE_VAL(mac, val)
     機能: 指定された定義値を定義した定数定義マクロを定義します。
     	   典型的には, 構造体などのデータ構造サイズの出力に用います。
     引数:
	mac 定数定義マクロのマクロ名
	val 定義値
     使用例: 構造体タグ名_kernel_riscv_ictxを持つ構造体のサイズを
             _KERNEL_RISCV_PROC_ICTX_SIZEというマクロ名で出力する例:

     ```
     DEFINE_VAL(_KERNEL_RISCV_PROC_ICTX_SIZE, sizeof(struct _kernel_riscv_ictx));
     ```

     2) OFFSET(_mac, _str, _mem)
     書式: OFFSET(mac, str, mem)
     機能: 指定された構造体フィールドに対する構造体先頭アドレスからの
           オフセットアドレスを定数定義マクロとして定義します。
	   典型的には, 構造体として定義されたコンテキスト情報中の
	   各レジスタ値格納アドレスの定義やI/Oレジスタの先頭からの
	   オフセットアドレスをマクロ定義するために使用します。
     引数:
	mac 定数定義マクロのマクロ名
	str 構造体タグ名
	mem 構造体フィールドのメンバ名
     使用例: 構造体タグ名_kernel_riscv_ictxを持つ構造体のraフィールドの
             構造体先頭アドレスからのオフセットアドレスを
             _KERNEL_RISCV_PROC_ICTX_RAというマクロ名で出力する
     ```
     OFFSET(_KERNEL_RISCV_PROC_ICTX_RA, _kernel_riscv_ictx, ra);
     ```

     3) _IN_ASM_OFFSET
     書式: _IN_ASM_OFFSET
     機能: asm_offset_helper.hをインクルードすることで定義される
           定数値マクロです。
           典型的には, オフセットファイル生成元Cソースからインクルードされる
	   ヘッダファイル中でオフセットファイルをインクルードしないよう
	   Cプリプロセッサに指示するために使用します。
     使用例: オフセットファイル``regoff.h''をオフセットファイル生成元Cソース
     以外のCソースでインクルードする例です。オフセットファイル生成元Cソース
     中でインクルードするヘッダファイル中で使用します。

     ```
     #if !defined(_IN_ASM_OFFSET)
     #include "regoff.h"  /* %jp{コンテキスト中のレジスタオフセット定義読み込み} */
     #endif  /*  !defined(_IN_ASM_OFFSET)  */
     ```



付録 A. オフセットファイル生成ツールのファイル構成

     hos-v4a/
        tools/asm_offset/ オフセットファイル生成ツール格納ディレクトリ
	   asm-offset.py  オフセットファイル生成ツール

        tools/asm_offset/include/
	   asm_offset_helper.h オフセットファイル用マクロ定義

	kernel/build/common/gmake/
	   asmoffgcc_d.inc GNU Make用オフセットファイル生成ルール定義支援関数



付録 B. オフセットファイル生成ツールのコマンドライン仕様

     オフセットファイル生成ツールのコマンドライン仕様は以下の通りです:

     ```
     asm-offset.py [オプション] infile outfile top_dir
       オプション:
         --version                   版数情報表示
	 -h, --help                  ヘルプ表示
	 -v, --verbose               冗長モードに設定

       位置引数:
         infile                      オフセットファイル生成元Cソースファイルの
	                             アセンブリ出力ファイルへのパス
         outfile                     出力するオフセットファイルへのパス
	 top_dir                     HOS-V4Aのトップディレクトリのパス
     ```

       asm-offset.pyコマンドは, オフセットファイルの多重インクルードを避ける
     ためのマクロ定義オフセットファイル中に定義します。asm-offset.pyコマンドは,
     生成するオフセットファイルの配置を第3引数`top_dir`で指定したディレクトリ
     からの相対パスで算出し, 本マクロを定義します。



付録 C. オフセットファイルの生成までのコマンドライン

       オフセットファイル生成元Cソースファイルからオフセットファイルを生成する
     手順は以下の通りです:

     1) gccまたはclangでオフセットファイル生成元Cソースファイルをアセンブラ入力
        ソースを出力します

      コマンドライン例:

         オフセットファイル生成元Cソースファイル`offset.c`からアセンブラ入力
       ソース`offset.s`を出力します。
         CMD_CC変数にクロスコンパイラ名, CFLAGS変数にインクルード指示, TOP_DIR
       変数にHOS-V4Aのトップディレクトリを定義した上で以下のコマンドを
       実行します。

       ```
       $(CMD_CC) $(CFLAGS) -I$(TOP_DIR)/tools/asm_offset/include \
                 -S -o offset.s offset.c
       ```

     2) オフセットファイル生成ツールを使用して, アセンブラ入力ソースから
        オフセットファイルを生成する

      コマンドライン例:

         アセンブラ入力ソース`offset.s`からオフセットファイル`offset.h`を生成
       します。以下のコマンドを実行します。

       ```
       $(TOP_DIR)/asm_offset/asm-offset.py offset.s offset.h $(TOP_DIR)
       ```



------------------------------------------------------------------------------
 end of file
------------------------------------------------------------------------------
